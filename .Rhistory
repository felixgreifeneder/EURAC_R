library("ggplot2")
library("R.matlab")
library("zoo")
library("raster")
source("./Aquarius/parallel_predictions.R")
#load required data
#--------------------------------------------------------------------------------------------------
val_points <- read.table("C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/insitu_coordlist.txt",
header=TRUE, sep=",")
globcover <- raster("C:/Users/FGreifeneder/Documents/tmp_proc/GLOBCOVER_L4_200901_200912_V2.3.tif")
#find insitu files
insitu.filelist = list.files(path = "C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/insitu_mariette",
pattern="*.csv",
full.names=T)
outdir = "C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/insitu_validation/ann_ascat_slope/"
#load ann dataset
#--------------------------------------------------------------------------------------------------
testset <- as.data.frame(readMat("C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/results_emanuele/validation/SLOPE/report.mat"))
testset <- testset[which(testset$RFI == 0),]
#find the matching time series
#--------------------------------------------------------------------------------------------------
# locations_filename <- "C:/Users/FGreifeneder/Documents/tmp_processing_stuff/Aquarius/global_v2/beam2_reprocessing20150417/timeseries/locations.txt"
# locations_frame <- data.frame(name=character(nrow(val_points)), st_lat=numeric(nrow(val_points)), st_lon=numeric(nrow(val_points)), aqu_lat=numeric(nrow(val_points)), aqu_lon=numeric(nrow(val_points)))
merged_tss <- list()
allData <- data.frame()
for (station_ind in c(1:nrow(val_points))){
dist_list <- numeric(0)
uniqueLocations <- unique(testset[,2:3])
nUL <- nrow(uniqueLocations)
#find the closest station
for (grid_ind in c(1:nUL)){
gridLat <- uniqueLocations$LAT[grid_ind]
gridLon <- uniqueLocations$LON[grid_ind]
stationLat <- val_points$lat[station_ind]
stationLon <- val_points$lon[station_ind]
dist <- sqrt((stationLat-gridLat)^2 + (stationLon-gridLon)^2)
dist_list <- c(dist_list, dist)
}
mindist.ind <- which.min(dist_list)
mindist <- min(dist_list)
print(paste(val_points$station[station_ind], mindist))
if (mindist <= 1){
smcts.ind <- which(testset$LAT == uniqueLocations$LAT[mindist.ind] & testset$LON == uniqueLocations$LON[mindist.ind])
df.era <- data.frame(time=testset$TIME[smcts.ind],
lat=testset$LAT[smcts.ind],
lon=testset$LON[smcts.ind],
erasmc=testset$SMC[smcts.ind])
#initiate time series
smcts.insitu <- read.zoo(insitu.filelist[station_ind], header=T, sep=",",
format="%Y-%m-%d", aggregate=T, tz="GMT", index.column = 1)
index(smcts.insitu) <- as.Date(index(smcts.insitu))
smcts.pred <- zoo(testset$SMC.NN[smcts.ind], order.by=as.POSIXct(df.era$time*24*60*60,
origin="1900-01-01 00:00:00",
tz="GMT"))
index(smcts.pred) <- as.Date(index(smcts.pred))
smcts.era <- zoo(df.era$erasmc, order.by=as.POSIXct(df.era$time*24*60*60,
origin="1900-01-01 00:00:00",
tz="GMT"))
index(smcts.era) <- as.Date(index(smcts.era))
if ((length(unique(index(smcts.era))) != length(index(smcts.era))) |
(length(unique(index(smcts.pred))) != length(index(smcts.pred))) |
(length(unique(index(smcts.insitu$mean))) != length(index(smcts.insitu$mean)))){
smcts.merged <- -1
} else {
#merge time-series
smcts.merged <- merge(smcts.pred, smcts.era, smcts.insitu$mean, all=c(T, T, F))
#add to all-data array
tmp <- fortify(smcts.merged)
tmp <- data.frame(tmp,
lc=rep(as.numeric(extract(globcover,
matrix(c(uniqueLocations$LON[mindist.ind], uniqueLocations$LAT[mindist.ind]), 1, 2),
buffer=1000,
fun=modal,
na.rm=T)),
nrow(tmp)))
tmp <- data.frame(tmp, bias = tmp$smcts.pred-tmp$smcts.insitu.mean)
allData <- rbind(allData, tmp)
}
} else {
smcts.merged <- -1
}
merged_tss[[station_ind]] <- smcts.merged
}
save(merged_tss, allData, file=paste(outdir,"tss.dat", sep=""))
#plot correlation
allData$lc <- as.factor(allData$lc)
dev.new(width=7, height=5, noRStudioGD=T)
ggplot(aes(x=smcts.pred, y=smcts.insitu.mean, colour=lc), data=allData[which(allData$lc != 220 & allData$lc != 210),]) +
geom_point() +
facet_wrap(~lc, ncol=3) +
xlab("\nEstimated SMC [m3m-3]") + ylab("In-Situ SMC [m3m-3] \n") +
scale_colour_discrete(name="Land-Cover\n",
labels=c("Cropland (50-70%)/vegetation (20-50%)",
"Vegetation (50-70%)/cropland (50-70%)",
"Closed brodleaved deciduous forest",
"Closed needleleaved forest",
"Open needleleaved forest",
"Closed to open mixed forest",
"Grassland (50-70%)/ forest or shrubland (20-50%)",
"Closed to open shrubland",
"Closed to open grassland",
"Sparse vegetation",
"Bare areas")) +
theme(aspect.ratio=1)
ggsave(filename=paste(outdir,"truevsest.png", sep=""))
#plot bias
dev.new(width=9, height=5, noRStudioGD=T)
ggplot(aes(x=lc, y=bias, fill=lc), data=allData[which(allData$lc != 220 & allData$lc != 210),]) +
geom_boxplot() + xlab("\nLand-Cover") + ylab("Bias [m3m-3]\n") + ylim(-0.2,0.4) +
scale_fill_discrete(name="Land-Cover\n",
labels=c("Cropland (50-70%)/vegetation (20-50%)",
"Vegetation (50-70%)/cropland (50-70%)",
"Closed brodleaved deciduous forest",
"Closed needleleaved forest",
"Open needleleaved forest",
"Closed to open mixed forest",
"Grassland (50-70%)/ forest or shrubland (20-50%)",
"Closed to open shrubland",
"Closed to open grassland",
"Sparse vegetation",
"Bare areas"))
ggsave(filename=paste(outdir,"boxplot_bias.png", sep=""))
#metrics insitu vs pred
sink(paste(outdir, "metrics.txt", sep=""))
cat("Overall correlation")
cat("\n")
cat(cor(allData$smcts.insitu.mean, allData$smcts.pred, use="pairwise.complete.obs"))
cat("\n")
cat("Correlations by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(cor(allData$smcts.insitu.mean[userows], allData$smcts.pred[userows], use="pairwise.complete.obs"))
cat("\n")
}
cat("\n")
cat("Overall mean bias")
cat("\n")
cat(mean(allData$smcts.pred-allData$smcts.insitu.mean, na.rm=T))
cat("\n")
cat("Mean Bias by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(mean(allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows], na.rm=T))
cat("\n")
}
cat("\n")
cat("Overall RMSE")
cat("\n")
cat(sqrt(mean((allData$smcts.pred-allData$smcts.insitu.mean)^2, na.rm=T)))
cat("\n")
cat("RMSE by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(sqrt(mean((allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows])^2, na.rm=T)))
cat("\n")
}
cat("\n")
sink()
#metrics insitu vs pred
sink(paste(outdir, "metrics.txt", sep=""))
cat("Overall correlation")
cat("\n")
cat(cor(allData$smcts.insitu.mean, allData$smcts.pred, use="pairwise.complete.obs"))
cat("\n")
cat("Correlations by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(cor(allData$smcts.insitu.mean[userows], allData$smcts.pred[userows], use="pairwise.complete.obs"))
cat("\n")
}
cat("\n")
cat("Overall mean bias")
cat("\n")
cat(mean(allData$smcts.pred-allData$smcts.insitu.mean, na.rm=T))
cat("\n")
cat("Mean Bias by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(mean(allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows], na.rm=T))
cat("\n")
}
cat("\n")
cat("Overall RMSE")
cat("\n")
cat(sqrt(mean((allData$smcts.pred-allData$smcts.insitu.mean)^2, na.rm=T)))
cat("\n")
cat("RMSE by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(sqrt(mean((allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows])^2, na.rm=T)))
cat("\n")
}
cat("\n")
sink()
# #plot time series
# for (i in 1:length(merged_tss)){
#   names(merged_tss[[i]]) <- c('Estimated', 'ERA-Land', 'In-situ')
#   ts_plot <- ggplot(aes(x= Index, y = Value, group = Series, colour = Series), data=fortify(merged_tss[[i]], melt= T)) +
#              geom_line() + xlab("Date") + ylab("") + facet_grid(Series ~ .) + theme(legend.position = "none") + geom_point()
#
#   ggsave(filename=paste("C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/merged_ts/Plot",i, ".png", sep=""), plot=ts_plot)
# }
#extract values for validation
library("e1071")
library("ggplot2")
library("R.matlab")
library("zoo")
library("raster")
source("./Aquarius/parallel_predictions.R")
#load required data
#--------------------------------------------------------------------------------------------------
val_points <- read.table("C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/insitu_coordlist.txt",
header=TRUE, sep=",")
globcover <- raster("C:/Users/FGreifeneder/Documents/tmp_proc/GLOBCOVER_L4_200901_200912_V2.3.tif")
#find insitu files
insitu.filelist = list.files(path = "C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/insitu_mariette",
pattern="*.csv",
full.names=T)
outdir = "C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/insitu_validation/ann_ascat_aqu/"
#load ann dataset
#--------------------------------------------------------------------------------------------------
testset <- as.data.frame(readMat("C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/results_emanuele/validation/AQUS/report.mat"))
testset <- testset[which(testset$RFI == 0),]
#find the matching time series
#--------------------------------------------------------------------------------------------------
# locations_filename <- "C:/Users/FGreifeneder/Documents/tmp_processing_stuff/Aquarius/global_v2/beam2_reprocessing20150417/timeseries/locations.txt"
# locations_frame <- data.frame(name=character(nrow(val_points)), st_lat=numeric(nrow(val_points)), st_lon=numeric(nrow(val_points)), aqu_lat=numeric(nrow(val_points)), aqu_lon=numeric(nrow(val_points)))
merged_tss <- list()
allData <- data.frame()
for (station_ind in c(1:nrow(val_points))){
dist_list <- numeric(0)
uniqueLocations <- unique(testset[,2:3])
nUL <- nrow(uniqueLocations)
#find the closest station
for (grid_ind in c(1:nUL)){
gridLat <- uniqueLocations$LAT[grid_ind]
gridLon <- uniqueLocations$LON[grid_ind]
stationLat <- val_points$lat[station_ind]
stationLon <- val_points$lon[station_ind]
dist <- sqrt((stationLat-gridLat)^2 + (stationLon-gridLon)^2)
dist_list <- c(dist_list, dist)
}
mindist.ind <- which.min(dist_list)
mindist <- min(dist_list)
print(paste(val_points$station[station_ind], mindist))
if (mindist <= 1){
smcts.ind <- which(testset$LAT == uniqueLocations$LAT[mindist.ind] & testset$LON == uniqueLocations$LON[mindist.ind])
df.era <- data.frame(time=testset$TIME[smcts.ind],
lat=testset$LAT[smcts.ind],
lon=testset$LON[smcts.ind],
erasmc=testset$SMC[smcts.ind])
#initiate time series
smcts.insitu <- read.zoo(insitu.filelist[station_ind], header=T, sep=",",
format="%Y-%m-%d", aggregate=T, tz="GMT", index.column = 1)
index(smcts.insitu) <- as.Date(index(smcts.insitu))
smcts.pred <- zoo(testset$SMC.NN[smcts.ind], order.by=as.POSIXct(df.era$time*24*60*60,
origin="1900-01-01 00:00:00",
tz="GMT"))
index(smcts.pred) <- as.Date(index(smcts.pred))
smcts.era <- zoo(df.era$erasmc, order.by=as.POSIXct(df.era$time*24*60*60,
origin="1900-01-01 00:00:00",
tz="GMT"))
index(smcts.era) <- as.Date(index(smcts.era))
if ((length(unique(index(smcts.era))) != length(index(smcts.era))) |
(length(unique(index(smcts.pred))) != length(index(smcts.pred))) |
(length(unique(index(smcts.insitu$mean))) != length(index(smcts.insitu$mean)))){
smcts.merged <- -1
} else {
#merge time-series
smcts.merged <- merge(smcts.pred, smcts.era, smcts.insitu$mean, all=c(T, T, F))
#add to all-data array
tmp <- fortify(smcts.merged)
tmp <- data.frame(tmp,
lc=rep(as.numeric(extract(globcover,
matrix(c(uniqueLocations$LON[mindist.ind], uniqueLocations$LAT[mindist.ind]), 1, 2),
buffer=1000,
fun=modal,
na.rm=T)),
nrow(tmp)))
tmp <- data.frame(tmp, bias = tmp$smcts.pred-tmp$smcts.insitu.mean)
allData <- rbind(allData, tmp)
}
} else {
smcts.merged <- -1
}
merged_tss[[station_ind]] <- smcts.merged
}
save(merged_tss, allData, file=paste(outdir,"tss.dat", sep=""))
#plot correlation
allData$lc <- as.factor(allData$lc)
dev.new(width=7, height=5, noRStudioGD=T)
ggplot(aes(x=smcts.pred, y=smcts.insitu.mean, colour=lc), data=allData[which(allData$lc != 220 & allData$lc != 210),]) +
geom_point() +
facet_wrap(~lc, ncol=3) +
xlab("\nEstimated SMC [m3m-3]") + ylab("In-Situ SMC [m3m-3] \n") +
scale_colour_discrete(name="Land-Cover\n",
labels=c("Cropland (50-70%)/vegetation (20-50%)",
"Vegetation (50-70%)/cropland (50-70%)",
"Closed brodleaved deciduous forest",
"Closed needleleaved forest",
"Open needleleaved forest",
"Closed to open mixed forest",
"Grassland (50-70%)/ forest or shrubland (20-50%)",
"Closed to open shrubland",
"Closed to open grassland",
"Sparse vegetation",
"Bare areas")) +
theme(aspect.ratio=1)
ggsave(filename=paste(outdir,"truevsest.png", sep=""))
#plot bias
dev.new(width=9, height=5, noRStudioGD=T)
ggplot(aes(x=lc, y=bias, fill=lc), data=allData[which(allData$lc != 220 & allData$lc != 210),]) +
geom_boxplot() + xlab("\nLand-Cover") + ylab("Bias [m3m-3]\n") + ylim(-0.2,0.4) +
scale_fill_discrete(name="Land-Cover\n",
labels=c("Cropland (50-70%)/vegetation (20-50%)",
"Vegetation (50-70%)/cropland (50-70%)",
"Closed brodleaved deciduous forest",
"Closed needleleaved forest",
"Open needleleaved forest",
"Closed to open mixed forest",
"Grassland (50-70%)/ forest or shrubland (20-50%)",
"Closed to open shrubland",
"Closed to open grassland",
"Sparse vegetation",
"Bare areas"))
ggsave(filename=paste(outdir,"boxplot_bias.png", sep=""))
#metrics insitu vs pred
sink(paste(outdir, "metrics.txt", sep=""))
cat("Overall correlation")
cat("\n")
cat(cor(allData$smcts.insitu.mean, allData$smcts.pred, use="pairwise.complete.obs"))
cat("\n")
cat("Correlations by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(cor(allData$smcts.insitu.mean[userows], allData$smcts.pred[userows], use="pairwise.complete.obs"))
cat("\n")
}
cat("\n")
cat("Overall mean bias")
cat("\n")
cat(mean(allData$smcts.pred-allData$smcts.insitu.mean, na.rm=T))
cat("\n")
cat("Mean Bias by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(mean(allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows], na.rm=T))
cat("\n")
}
cat("\n")
cat("Overall RMSE")
cat("\n")
cat(sqrt(mean((allData$smcts.pred-allData$smcts.insitu.mean)^2, na.rm=T)))
cat("\n")
cat("RMSE by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(sqrt(mean((allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows])^2, na.rm=T)))
cat("\n")
}
cat("\n")
sink()
#metrics insitu vs pred
sink(paste(outdir, "metrics.txt", sep=""))
cat("Overall correlation")
cat("\n")
cat(cor(allData$smcts.insitu.mean, allData$smcts.pred, use="pairwise.complete.obs"))
cat("\n")
cat("Correlations by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(cor(allData$smcts.insitu.mean[userows], allData$smcts.pred[userows], use="pairwise.complete.obs"))
cat("\n")
}
cat("\n")
cat("Overall mean bias")
cat("\n")
cat(mean(allData$smcts.pred-allData$smcts.insitu.mean, na.rm=T))
cat("\n")
cat("Mean Bias by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(mean(allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows], na.rm=T))
cat("\n")
}
cat("\n")
cat("Overall RMSE")
cat("\n")
cat(sqrt(mean((allData$smcts.pred-allData$smcts.insitu.mean)^2, na.rm=T)))
cat("\n")
cat("RMSE by LC")
cat("\n")
for (i in levels(allData$lc)){
userows <- which(allData$lc == i)
cat(i)
cat(": ")
cat(sqrt(mean((allData$smcts.pred[userows]-allData$smcts.insitu.mean[userows])^2, na.rm=T)))
cat("\n")
}
cat("\n")
sink()
# #plot time series
# for (i in 1:length(merged_tss)){
#   names(merged_tss[[i]]) <- c('Estimated', 'ERA-Land', 'In-situ')
#   ts_plot <- ggplot(aes(x= Index, y = Value, group = Series, colour = Series), data=fortify(merged_tss[[i]], melt= T)) +
#              geom_line() + xlab("Date") + ylab("") + facet_grid(Series ~ .) + theme(legend.position = "none") + geom_point()
#
#   ggsave(filename=paste("C:/Users/FGreifeneder/Documents/tmp_proc/SCA_paper/merged_ts/Plot",i, ".png", sep=""), plot=ts_plot)
# }
#derive SMC map
library(raster)
source("./Aquarius/parallel_predictions.R")
workdir = "C:/Users/FGreifeneder/Documents/work/"
#load and prepared datasets
rs2path <- "X:/Workspaces/GrF/01_Data/RADARSAT2/2015/RS2_OK64176_PK603574_DK535224_S3_20150709_170657_HH_HV_SLC.tif"
file.copy(rs2path, paste(workdir, basename(rs2path), sep=""))
rs2path <- paste(workdir, basename(rs2path), sep="")
rs2hh <- raster(rs2path, band=1)
rs2hv <- raster(rs2path, band=2)
rs2lia <- raster(rs2path, band=3)
#load dem
dempath <- "X:/Workspaces/GrF/01_Data/ANCILLARY/DEM/dtm_10_st_sub_west_latlon.tif"
file.copy(dempath, paste(workdir, basename(dempath), sep=""))
dempath <- paste(workdir, basename(dempath), sep="")
dem <- raster(dempath)
slopepath <- "X:/Workspaces/GrF/01_Data/ANCILLARY/DEM/dtm_10_st_sub_west_latlon_slope.tif"
file.copy(slopepath, paste(workdir, basename(slopepath), sep=""))
slopepath <- paste(workdir, basename(slopepath), sep="")
slope <- raster(slopepath)
aspectpath <- "X:/Workspaces/GrF/01_Data/ANCILLARY/DEM/dtm_10_st_sub_west_latlon_aspect.tif"
file.copy(aspectpath, paste(workdir, basename(aspectpath), sep=""))
aspectpath <- paste(workdir, basename(aspectpath), sep="")
aspect <- raster(aspectpath)
#crop datasets
ROIext <- extent(10.51, 10.70, 46.634, 46.808)
rs2hh <- crop(rs2hh, ROIext)
rs2hv <- crop(rs2hv, ROIext)
rs2lia <- crop(rs2lia, ROIext)
dem <- crop(dem, ROIext)
slope <- crop(slope, ROIext)
aspect <- crop(aspect, ROIext)
#--------------------------------------------------------------------------------------------------
#extract data
df <- data.frame(hh=numeric(),
hv=numeric(),
lia=numeric(),
height=numeric(),
slope=numeric(),
aspect=numeric(),
row=numeric(),
col=numeric())
cntr <- 1
pb <- txtProgressBar(min = 0, max = nrow(rs2hh)*ncol(rs2hh))
for (rind in 1:nrow(rs2hh)){
for (cind in 1:ncol(rs2hh)){
setTxtProgressBar(pb, value=cntr)
lon <- xFromCol(rs2hh, col=cind)
lat <- yFromRow(rs2hh, row=rind)
lonlat <- matrix(c(lon,lat),1,2)
hh <- rs2hh[rind,cind]
hv <- rs2hv[rind,cind]
lia <- rs2lia[rind,cind]
h <- extract(dem, lonlat)
s <- extract(slope, lonlat)
a <- extract(aspect, lonlat)
r <- rind
c <- cind
tmp <- data.frame(hh=hh,
hv=hv,
lia=lia,
height=h,
slope=s,
aspect=a,
row=r,
col=c)
df[cntr,] <- tmp
cntr <- cntr + 1
}
}
